name: Pull and Publish to ECR

on:
  # push:
  #   branches: [ "master", "main" ] 
  workflow_dispatch:
  pull_request:
    branches: [ "master", "main" ] 

env:
  REPO: ${{ github.event.repository.name }}
  DOCKER_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
  DOCKER_TOKEN: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
  PRISMA_USERNAME: ${{ secrets.PCC_USER }}
  PRISMA_PASSWORD: ${{ secrets.PCC_PASS }}
  PRISMA_API_URL: ${{ vars.PRISMA_API_URL }}
  BUILD_DIR: "."
  IMAGENAME: "defender"
  ECR_uri: "056823345367.dkr.ecr.us-east-1.amazonaws.com"

jobs:


  pull-image:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    # - name: Dump github context
    #   run:   echo "$GITHUB_CONTEXT"
    #   shell: bash
    #   env:
    #     GITHUB_CONTEXT: ${{ toJson(github) }}
    # - name: Test variables
    #   run: echo "hello from $REPO"
    # - name: Run Bridgecrew 
    #   id: Bridgecrew
    #   uses: bridgecrewio/bridgecrew-action@master
    #   # env:
    #   #   PRISMA_API_URL: https://api4.prismacloud.io
    #   with:
    #     api-key: ${{ env.PRISMA_USERNAME }}::${{ env.PRISMA_PASSWORD }}
    #     #directory: "example/examplea"
    #     #check: CKV_AWS_1 # optional: run only a specific check_id. can be comma separated list
    #     #skip_check: CKV_AWS_1 # optional: skip a specific check_id. can be comma separated list
    #     soft_fail: true
    #     #framework: terraform # optional: run only on a specific infrastructure {cloudformation,terraform,kubernetes,all}
    #     output_format: cli
    #     quiet: false
    #     external_checks_dirs: ./checkov
    #     download_external_modules: true # optional: download external terraform modules from public git repositories and terraform registry
    #     #log_level: DEBUG # optional: set log level. Default WARNING
    # - name: Assign build number
    #   run: |
    #     echo "BUILD_ID=$(date +'%y_%m_%d')" >> $GITHUB_ENV
    - name: Lowercase the repo name for docker hub
      run: |
        echo "REPO=`echo $REPO | tr '[:upper:]' '[:lower:]'`" >> $GITHUB_ENV
    - name: Login to Prisma Cloud
      run: |
        echo "TOKEN=`curl -sk -H "Content-Type: application/json" -X POST -d '{"username":"${{ env.PRISMA_USERNAME }}","password":"${{ env.PRISMA_PASSWORD }}"}' ${{ secrets.PCC_CONSOLE_URL }}/api/v1/authenticate | jq -r .token `" >> $GITHUB_ENV
    - name: Get image name and make Docker File
      run: |
        [[ -n "$TOKEN" ]] || exit 127 
        [[ -x `which jq` ]] || exit 127
        IMAGE=`curl -sk -H "Authorization: Bearer $TOKEN" ${{ secrets.PCC_CONSOLE_URL }}/api/v1/defenders/image-name | tr -d '"'`
        [[ -n "$IMAGE" ]] || exit 127 
        echo "FROM $IMAGE" > ./Dockerfile
        echo "IMAGETAG=`awk -F: '{print $NF}' <<<"$IMAGE"`" >> $GITHUB_ENV
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to ECR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.ECR_uri}}
        username: ${{ secrets.AWS_ACCESS_KEY_ID }}
        password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    # - name: Build the Docker image for scanning purposes
    #   run: |
    #     docker build -t "$DOCKER_USERNAME/$REPO:$BUILD_ID" $BUILD_DIR
    # - name: Prisma Cloud image scan
    #   id: scan
    #   uses: PaloAltoNetworks/prisma-cloud-scan@v1
    #   with:
    #     pcc_console_url: ${{ secrets.PCC_CONSOLE_URL }}
    #     pcc_user: ${{ env.PRISMA_USERNAME }}
    #     pcc_pass: ${{ env.PRISMA_PASSWORD }}
    #     image_name: ${{ env.DOCKER_USERNAME }}/${{ env.REPO }}:${{env.BUILD_ID}}
    # - name: Run yor action
    #   uses: bridgecrewio/yor-action@main
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: ${{env.BUILD_DIR}}  # Path to the Dockerfile and build context
        platforms: linux/amd64,linux/arm64  # Specify the desired platforms
        push: true 
        tags: |
            ${{ env.ECR_uri}}/${{env.IMAGENAME}}:${{env.IMAGETAG}}
            ${{ env.ECR_uri}}/${{env.IMAGENAME}}:latest
    # Not needed since it is pushed in the above step
    # - name: Publish the Docker image
    #   run: docker push -a ${{ env.DOCKER_USERNAME }}/${{ env.REPO }}
